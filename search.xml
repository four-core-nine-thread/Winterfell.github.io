<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[pyCharm中Django项目的基本配置]]></title>
    <url>%2F2018%2F05%2F28%2FpyCharm%E4%B8%ADDjango%E9%A1%B9%E7%9B%AE%E7%9A%84%E5%9F%BA%E6%9C%AC%E9%85%8D%E7%BD%AE%2F</url>
    <content type="text"><![CDATA[1.创建虚拟环境 2.如果没有出现报错,就说明环境创建成功,我们所创建的文件名就是项目名称 3.在项目目录下的init.py中导入数据库模块 4.打开终端模式,输入python manage.py startapp my_app创建一个名为my_app的应用 5.应用创建后,我们需要在项目目录下的settings.py中进行关于应用,连接数据库等的设置 进行应用的添加 进行数据库的配置 进行语言和时区的设置 进行静态文件路径的设置 6.项目的基本配置完成后,我们就可以使用在终端模式下使用python manage.py runserver启动我们的服务器啦,出现以下画面就代表配置成功 7.输出localhost查看我们的服务器,出现以下画面,说明我们配置的没有问题 总结:以上就是我们一个项目的基本配置,当然我们创建应用后进行功能的实现,还需要对url.py进行路径的设置,以及在应用目录下对models.py,views.py的编写.]]></content>
      <categories>
        <category>Django</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[Linux下git的使用]]></title>
    <url>%2F2018%2F05%2F27%2FLinux%E4%B8%8Bgit%E7%9A%84%E4%BD%BF%E7%94%A8%2F</url>
    <content type="text"><![CDATA[yum install git : 安装git git init:初始化创建本地仓库 git –version :查看git版本 git add :项目放入本地的缓存区 git commit -m ‘描述’:将项目放入本地的仓库中,并附带描述 git status:查看文件状态 git log:查看日志 git relog:当使用reset回到之前的版本时,可以使用该命令查看该版本之后的版本 git reset –hard 标识码:可以回到标识码所标记的版本 git checkout – (文件名) :撤销缓冲区中的项目,需要修改之后重新提交到缓冲区 git clone url:从服务器将项目拷贝到本地 git push origin master:将本地仓库中的文件提交到服务器的master的分支上 git pull:将服务器中的项目拉下来 git remote add origin url:将本地仓库与远程仓库对接 git push -u origin master:对接之后将项目提交到远程仓库 git branch 分支名:在本地创建分支 git branch:查看当前所处分支 git checkout 分支名:切换分支 git merge 分支名:将分支合并入master分支 git push origin master:将项目提交到master分支 git rm 文件名:删除文件 git branch -D 分支名:删除本地某个分支 git push origin :分支名:删除远程分支 Git日常工作流程 从远端拉取项目(前提是本地无该项目): git clone {url} #从远端克隆项目 cd {dir} #克隆到本地后,进入项目 git branch {name} # 创建分支,一般修改项目不要在master主分支中修改 git branch #查看有哪些分支 git checkout {name} #切换到指定的分支,默认所处分支是master主分支 git add . # 切换成功后,在非主分支中,将修改的项目提交到缓冲区,&lt;.&gt;代表提交所有文件,也可以输入文件名提交指定的文件,文件不能为空,否则无法提交 git rm {filename} # 删除文件, 如果是文件夹需要输入git rm -r 文件夹进行遍历删除 git commit -m ‘描述’ # 将缓冲区的文件提交到本地仓库中并附带描述 git push origin {branch} # 将本地仓库的文件提交到远程仓库的分支,哪个分支由自己指定 将本地文件上传到远端(前提是本地有文件): cd 文件夹 # 进入文件夹 git init : # 初始化本地仓库,必须保证该文件夹中没有.git文件 git add . # 将文件中的内容提交到缓冲区 git commit -m ‘11’ # 将缓冲区的文件提交到本地仓库 git remote add origin {url} # 将本地仓库与远程仓库对接 git push -f origin master # 本地强制上传到远程，把远程的覆盖 注:第6部可以使用git pull –rebase origin master ——-&gt; git push -u origin master代替,但是最好使用第6部的方法,因为–rebase是拉取远端仓库覆盖本地,然后我们再上传,涉及到了两步操作.]]></content>
      <categories>
        <category>Linux</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[redis服务器的基本配置]]></title>
    <url>%2F2018%2F05%2F27%2Fredis%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%9A%84%E5%9F%BA%E6%9C%AC%E9%85%8D%E7%BD%AE%2F</url>
    <content type="text"><![CDATA[启动redis服务器 配置redis.conf文件 bind &lt;内网地址&gt; port &lt;端口号&gt; requirepass &lt;服务器密码&gt; 启动redis服务器 redis-server redis.conf &amp; 启动redis客户端 redis-cli -h &lt;服务器地址&gt; -p &lt;服务器端口&gt; -a &lt;服务器密码&gt; 进去之后输入Info replication查看master,slaver信息 redis中主从切换在作为master的服务器中: 在redis.conf文件中写入masterauth &lt;master服务器密码&gt; 注:这里需要输入将来可能成为master的服务器密码,哨兵在投票时可以设定优先级使得指定的slave服务器上位. 在sentinel.conf文件中进行哨兵的配置 bind &lt;本服务器内网地址&gt; port &lt;哨兵端口号&gt; sentinel monitor mymaster &lt;master服务器地址&gt; &lt;master服务器端口号&gt; &lt; 投票数&gt;至少小于哨兵个数的一半) sentinel auth-pass mymaster &lt;master服务器密码&gt; sentinel down-after-milliseconds mymaster 5000:指定服务器已经断线所需的毫秒数,超时则主观下线 sentinel failover-timeout mymaster 18000:表示master上线超时期限,超时则客观下线 在作为salve的服务器中: 在redis.conf文件中写入slaveof &lt;master服务器外网地址&gt; &lt;master服务器端口号 &gt; 在redis.conf文件中写入 masterauth &lt;master服务器密码&gt;]]></content>
      <categories>
        <category>Linux</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[Linux常用命令]]></title>
    <url>%2F2018%2F05%2F27%2FLinux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%2F</url>
    <content type="text"><![CDATA[uname:查看操作系统 cat /ect/centos-release:查看操作系统版本 ps -ef (| grep &lt;进程名&gt;):查看进程,使用管道可以查询某个进程 top :查看进程,是进程的当前状态一次性快照属于动态查看,ps -ef 是进程过去状态的一次性快照,属于静态查看 netstat -nap:查看进程状态,例如listening ,connected等 ifconfig -a:查看ip地址 kill (-9) PID:关闭一个进程,-9显示最高级别的删除,强制终止,可能会导致数据丢失 adduser 用户名:创建一个非root的用户,权限较低 userdel 用户名:删除指定用户 passwd 用户名:为指定用户添加密码,若用户已有密码,则修改密码,如果不添加用户名,则默认修改当前用户密码 logout(exit):退出当前用户 su 用户名:切换用户 shutdown(init 0):关机 reboot(init 6):重启 man 指令:查看指令手册 info 指令:更为详细的解释指令 指令 –help:查看指令帮助 whatis 指令: 简短解释指令 whereis 指令(文件):从Linux的数据库中查询指定指令或者文件 find 文件:用于查询文件 pwd:查看当前所处目录 sudo 指令:使用管理员身份运行指令,普通用户使用该命令 mkdir 文件夹:创建一个空的文件夹 rmdie 文件夹:删除一个空的文件夹 touch 文件:创建一个文件 rm -rf 文件(文件夹):递归删除一个文件夹,也可以用户删除文件 ls -al:查看当前目录所有文件的长格式,包括隐藏文件 cd :改变目录 cat -n 文件:查看文件内容并显示行数 cat -n | more(less):一页一页的查看文件内容 head -num 文件:查看文件的开头几行 tail -num 文件:查看文件的末尾几行 cp 文件 文件路径/(文件名):将文件拷贝到文件夹中,同时可以对其重命名 mv 文件 文件:对文件进行重命名 mv 文件 文件路径/(文件名):将文件剪切到文件夹中,同时可以对其重命名 grep 搜索内容 文件 :在文件中搜索指定内容 cat 文件 | grep 内容:在文件中搜索指定内容并查看 ctrl c:终止正在前台运行的程序 ctrl z:将前台正在运行的程序拿到后台并停止运行 jobs:查看后台有无程序在执行 fg %num:将后台正在执行的任务拿到前台 bg %num:将后台停止运行的程序继续执行,一般配合ctrl z使用 wc 文件 (-l -w -c):计算文件中有多少行,多少字符,多少字节 diff 文件 文件:比较两个文件的差别 file 文件:查看文件性质 history:查看历史命令 last:查看登陆历史 echo:回声命令,其实功能很强大,暂时还没怎么研究 ssh + 用户名@IP地址:登陆到其他用户 ln 文件名 文件夹路径:在某个文件夹中为文件创建一个硬链接 ln -s 文件路径 /user/bin:为一个程序创建一个软链接 gunzip 压缩文件(后缀为gz):对一个文件进行解压缩 gzip 文件:将一个文件压缩成.gz后缀文件 xz -d 压缩文件(后缀为xz):对一个文件进行解压缩 xz -z 文件:将一个文件压缩成xz后缀文件 tar -xvf 归档文件:解归档 tar -cvf 文件名 文件,文件,…(*):将文件进行归档并对归档后的文件进行命名 tar -tf 归档文件:读取归档文件中的内容 wget url:下载指定网址内容 alias 新命令 ‘旧命令’:为一个命令重新进行命名 unalias 命令:取消重命名 chmod 755 文件:将文件的执行模式更改为当前用户可读可写可执行,其他用户或者组成员只能读和执行 vim的命令模式 vim的默行模式 yum install 软件:安装开源软件 yum list installed:查看安装的所有软件 yum search 软件:搜索软件 yum update 软件:更新软件 rpm -ivh 软件:安装软件,可以查看安装过程 rpm -e 软件:删除软件 rpm -qa:查看所有安装的软件 rpm -qa | grep 软件:搜索安装的某个文件 rpm -qa |grep 软件 | xargs rpm -r :搜索软件并将其删除 nginx:启动nginx nginx -s stop:停止nginx,也可以使用kill 进程号来结束进程 systemctl start mariadb:启动MySQL,systemctl命令用于执行系统服务 systemctl stop mariadb:停止MySQL systemctl status mariadb:查看服务的运行状态 systemctl enable mariadb:开机自启MySQL systemctl disable mariadb:取消自启MySQL make &amp;&amp; make install:进行源代码安装 redis-server redis.conf :启动redis服务器 redis-cli -h ip:连接redis服务器 auth password:连接服务器后输入密码 pip3 install ipython:安装ipython ln -s /user/local/python3.6/bin/ipython3 /user/bin/ipython3:创建软链接 firewall-cmd –zone=public –list-ports:查看防火墙所有的打开端口 firewall-cmd –zone=public –add-port=80/tcp –permanent:永久打开防火墙80端口 firewall-cmd –zone=public –remove-port=80/tcp –permanent:永久删除防火墙80端口 注:括号中的操作代表可选操作]]></content>
      <categories>
        <category>Linux</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[Hello World]]></title>
    <url>%2F2018%2F05%2F26%2Fhello-world%2F</url>
    <content type="text"><![CDATA[Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new "My New Post" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment]]></content>
  </entry>
</search>
